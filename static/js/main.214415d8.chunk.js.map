{"version":3,"sources":["component/moviePoster/MoviePoster.js","component/movieLibrary/movieFavorite/MovieFavorite.js","component/movieLibrary/starVoter/StarVoter.js","state/action-creators/loadingAction.js","req/omdbReq.js","component/movieLibrary/MovieLibrary.js","App.js","component/loading/Loading.js","state/reducers/loadingReducer.js","state/reducers/index.js","state/store.js","index.js"],"names":["MoviePoster","poster","useState","isFavorite","setIsFavorite","useCookies","cookies","setCookies","useEffect","favorites","map","fav","imdbID","className","Title","alt","src","Poster","Year","Type","onClick","filter","path","rate","watched","size","color","MovieFavorite","favorite","setSelectedMovie","StartVoter","Array","fill","converter","star","forEach","index","buffer","loading","isLoading","type","omdbFindByTitle","title","a","fetch","respond","json","omdbFindById","MovieLibrary","backRefresh","selectedMovie","setFavorites","dispatch","useDispatch","then","result","push","length","catch","err","console","log","message","setTimeout","findMovies","to","style","find","StarVoter","Ratings","Value","Genre","Runtime","Writer","Actors","Plot","favCookie","App","setTitle","searchResult","setSearchResult","Search","placeholder","value","onChange","e","target","Loading","useSelector","state","display","loadingReducer","action","reducers","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2YA+DeA,EAzDK,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnB,EAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAEA,EAA8BC,YAAW,CAAC,cAA1C,mBAAOC,EAAP,KAAgBC,EAAhB,KAyBA,OANAC,qBAAU,WACHF,EAAQG,WACPH,EAAQG,UAAUC,KAAI,SAAAC,GAAG,OACrBV,EAAOW,SAAWD,EAAIC,QAAUR,GAAc,QACvD,IAGC,qBAAKS,UAAU,cAAf,SACI,2BAAUA,UAAU,wBAApB,UACI,iCAASZ,EAAOa,QAEhB,qBAAKD,UAAU,kBACfE,IAAI,SACJC,IAAMf,EAAOgB,SAEb,sBAAKJ,UAAU,mBAAf,UACI,8CAAeZ,EAAOiB,QAEtB,8CAAejB,EAAOkB,QAEtB,gDAAiBlB,EAAOW,UAExB,qBAAKC,UAAU,uBACfO,QAAS,kBAnClBjB,EACCI,EAAW,YAAaD,EAAQG,UAAUY,QAAO,SAAAV,GAAG,OAAIV,EAAOW,SAAWD,EAAIC,UAAS,CAAEU,KAAM,MAE5FhB,EAAQG,UACPF,EAAW,YAAD,sBAAkBD,EAAQG,WAA1B,CAAqC,CAACG,OAAQX,EAAOW,OAAQW,KAAM,EAAGC,SAAS,KAAS,CAAEF,KAAM,MAE1Gf,EAAW,YAAa,CAAC,CAACK,OAAQX,EAAOW,OAAQW,KAAM,EAAGC,SAAS,IAAS,CAAEF,KAAM,WAE5FlB,GAAeD,IA0BH,SAEKA,EACI,cAAC,IAAD,CAAasB,KAAM,QAASC,MAAM,QAClC,cAAC,IAAD,CAAgBD,KAAM,qB,sBCnCpCE,EAhBO,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,SAAUJ,EAAgC,EAAhCA,QAASK,EAAuB,EAAvBA,iBAExC,OACI,qBAAKhB,UAAU,gBACfO,QAAS,kBAAMS,EAAiBD,IADhC,SAEG,2BAAUf,UAAU,0BAApB,UACI,iCAASe,EAASd,QAElB,qBAAKC,IAAI,SAASC,IAAMY,EAASX,SAEhCO,GAAW,cAAC,IAAD,CAASX,UAAU,wBAAwBY,KAAM,eCgC7DK,G,MAxCI,SAAC,GAAsB,IAApBlB,EAAmB,EAAnBA,OAAQW,EAAW,EAAXA,KAE1B,EAA8BlB,YAAW,CAAC,cAA1C,mBAAOC,EAAP,KAAgBC,EAAhB,KAYA,OACI,qBAAKM,UAAU,YAAf,SAPc,SAACU,GAEf,OADe,IAAIQ,MART,GASIC,MAAK,EAAM,EAAGT,GAAMS,MAAK,EAAOT,EATpC,GAeLU,CAAUV,GAAMb,KAAI,SAACwB,EAAMX,GAAP,OACjB,qBAAKV,UAAU,iBACfO,QAAS,WACLd,EAAQG,UAAU0B,SAAQ,SAACxB,EAAKyB,GAC5B,GAAGzB,EAAIC,SAAWA,EAAQ,CACtB,IAAMyB,EAAS/B,EAAQG,UACvB4B,EAAOD,GAAS,CACZxB,OAAQD,EAAIC,OACZW,KAAMA,EAAK,EACXC,QAAUa,EAAOD,GAAOZ,SAC5BjB,EAAW,YAAc8B,EAAQ,CAAEf,KAAM,WATrD,SAcKY,EAAO,cAAC,IAAD,CAAYT,KAAM,OAAQC,MAAO,WAAa,cAAC,IAAD,CAAeD,KAAM,UAd1CF,U,gBCtBxCe,EAAU,SAACC,GACpB,OAAGA,EAAiB,CAAEC,KAAM,iBACjB,CAAEA,KAAM,iB,iCCFVC,EAAe,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACLC,MAAM,8BAAD,OAA+BF,EAA/B,qBADA,cACrBG,EADqB,yBAEpBA,EAAQC,QAFY,2CAAH,sDAKfC,EAAY,uCAAG,WAAOnC,GAAP,eAAA+B,EAAA,sEACFC,MAAM,8BAAD,OAA+BhC,EAA/B,qBADH,cAClBiC,EADkB,yBAEjBA,EAAQC,QAFS,2CAAH,sDC6IVE,EAnIM,SAAC,GAAqB,IAAD,IAAlBC,EAAkB,EAAlBA,YACpB,EAA0C/C,qBAA1C,mBAAOgD,EAAP,KAAsBrB,EAAtB,KACA,EAAkC3B,qBAAlC,mBAAOO,EAAP,KAAkB0C,EAAlB,KACA,EAA8B9C,YAAW,CAAC,cAA1C,mBAAOC,EAAP,KAAgBC,EAAhB,KAEM6C,EAAWC,cAiEjB,OAJA7C,qBAAU,YAxDS,WACf4C,EAASd,GAAQ,IAEjB,IAAMD,EAAS,GAEf/B,EAAQG,WAAaH,EAAQG,UAAU0B,SAAQ,SAAAxB,GAE3CoC,EAAapC,EAAIC,QACZ0C,MAAK,SAACC,GAEHlB,EAAOmB,KAAKD,GAETlB,EAAOoB,QAAUnD,EAAQG,UAAUgD,QAClCN,EAAad,GAEVA,EAAOoB,OAAS,GACf5B,EAAiBQ,EAAO,OAEnCqB,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,EAAIG,eAGtCC,YAAW,kBAAMX,EAASd,GAAQ,MAAS,KAoC3C0B,KACD,IAGC,sBAAKnD,UAAU,eAAf,UAEQ,cAAC,IAAD,CAAMoD,GAAI,IACV7C,QAAS,kBAAM6B,KADf,SAEI,cAAC,IAAD,CAAepC,UAAU,oBACzBY,KAAM,WAGV,qBAAKZ,UAAU,wBAEdqC,GAAiB,sBAAKrC,UAAU,oBAAf,UACd,sBAAKA,UAAU,wBAAf,UACI,qBAAKA,UAAU,mBACfE,IAAI,SACJC,IAAKkC,EAAcjC,SAEnB,sBAAKJ,UAAU,0BAAf,UACI,cAAC,IAAD,CAASA,UAAU,uBACnBY,KAAM,OACNL,QAAS,WAxC7Bd,EAAQG,UAAU0B,SAAQ,SAACxB,EAAKyB,GAC5B,GAAGzB,EAAIC,SAAWsC,EAActC,OAAQ,CACpC,IAAMyB,EAAS/B,EAAQG,UAEvB4B,EAAOD,GAAS,CACZxB,OAAQD,EAAIC,OACZW,KAAMc,EAAOD,GAAOb,KACpBC,SAAUa,EAAOD,GAAOZ,SAG5BjB,EAAW,YAAa8B,EAAQ,CAACf,KAAM,WA+B3B4C,MAAO,CACHxC,OAAO,UAAApB,EAAQG,UAAU0D,MAAK,SAAAxD,GAAG,OAAIA,EAAIC,SAAWsC,EAActC,iBAA3D,eAAoEY,SACrE,QACA,WAGV,cAAC,IAAD,CAASX,UAAU,sBACnBY,KAAM,OACNL,QAAS,kBAhETR,EAgE8BsC,EAActC,OA9DhEL,EACI,YACAD,EAAQG,UAAUY,QAAO,SAACV,GAAD,OAASA,EAAIC,SAAWA,KACjD,CAAEU,KAAM,MAGZ6B,EAAa1C,EAAUY,QAAO,SAACV,GAAD,OAASA,EAAIC,SAAWA,WAEtDH,EAAU,GAAKoB,EAAiBpB,EAAU,IAAMoB,KAV7B,IAACjB,WAoER,cAACwD,EAAD,CACAxD,OAAQsC,EAActC,OACtBW,KAAI,UAAEjB,EAAQG,UAAU0D,MAAK,SAAAxD,GAAG,OAAIA,EAAIC,SAAWsC,EAActC,iBAA7D,aAAE,EAAoEW,UAG7E2B,GAAiB,sBAAKrC,UAAU,oBAAf,UACd,6CAAcqC,EAAcmB,QAAQ,IAAMnB,EAAcmB,QAAQ,GAAGC,MAAnE,YACA,4CAAapB,EAAchC,QAC3B,6CAAcgC,EAAcqB,SAC5B,+CAAgBrB,EAAcsB,WAC9B,8CAAetB,EAAcuB,UAC7B,8CAAevB,EAAcwB,UAC7B,4CAAaxB,EAAcyB,WAG9BlE,GAAa,qBAAKI,UAAU,yBAAf,SACTJ,EAAUC,KAAI,SAAAC,GAAG,OACd,cAAC,EAAD,CACAiB,SAAUjB,EACVa,QAASlB,EAAQG,UAAU0D,MAAK,SAAAS,GAAS,OAAIA,EAAUhE,SAAWD,EAAIC,UAAQY,QAC9EK,iBAAkBA,GAHElB,EAAIC,iB,OChEjCiE,MAzDf,WACE,MAA0B3E,mBAAS,IAAnC,mBAAOwC,EAAP,KAAcoC,EAAd,KACA,EAAwC5E,mBAAS,IAAjD,mBAAO6E,EAAP,KAAqBC,EAArB,KAEM5B,EAAWC,cAMXW,EAAa,WACjBZ,EAASd,GAAQ,IACjB0C,EAAgB,IAEhBvC,EAAgBC,GACbY,MAAK,SAACT,GACLmC,EAAgBnC,EAAQoC,QACxBlB,YAAW,kBAAMX,EAASd,GAAQ,MAAS,QAE5CoB,OAAM,SAACC,GACNC,QAAQC,IAAIF,EAAIG,SAChBC,YAAW,kBAAMX,EAASd,GAAQ,MAAS,SAKjD,OACE,sBAAKzB,UAAU,MAAf,UACE,qBAAKA,UAAU,eAEf,cAAC,IAAD,CAAMoD,GAAG,YAAT,SACE,cAAC,IAAD,CAAWpD,UAAU,cAAcY,KAAM,WAG3C,sBAAKZ,UAAU,aAAf,UACE,uBAAO2B,KAAK,OACZ0C,YAAY,sBACZC,MAAOzC,EACP0C,SAAU,SAAAC,GAAC,OAAIP,EAASO,EAAEC,OAAOH,UAEjC,wBAAQ/D,QAAS,kBAAM4C,KAAvB,uBAKDe,GAAgB,qBAAKlE,UAAU,cAAf,SACdkE,EAAarE,KAAI,SAACT,GAAD,OAAY,cAAC,EAAD,CAAiCA,OAAQA,GAAvBA,EAAOW,aAIzD,cAAC,IAAD,CAAOU,KAAK,YAAZ,SACE,cAAC,EAAD,CAAc2B,YAAae,U,gBClDpBuB,EAXC,WACZ,IAAMhD,EAAYiD,aAAY,SAACC,GAAD,OAAWA,EAAMnD,WAE/C,OACI,qBAAKzB,UAAU,UACfqD,MAAO,CAACwB,QAASnD,EAAY,OAAS,QADtC,SAEI,cAAC,IAAD,CAAe1B,UAAU,gBAAgBY,KAAM,a,QCA5CkE,EAVQ,WAA4B,IAA3BF,EAA0B,wDAAXG,EAAW,uCAC9C,OAAQA,EAAOpD,MACX,IAAK,gBAAgB,OAAO,EAE5B,IAAK,eAAe,OAAO,EAE3B,QAAS,OAAOiD,ICETI,EAJEC,YAAgB,CAC7BxD,QAASqD,ICAEI,EAFDC,YAAYH,GCQ1BI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,WAINK,SAASC,eAAe,W","file":"static/js/main.214415d8.chunk.js","sourcesContent":["import './moviePoster.css';\r\nimport { AiOutlineHeart, AiFillHeart } from 'react-icons/ai'\r\n\r\nimport { useState, useEffect } from 'react'\r\nimport { useCookies } from 'react-cookie'\r\n\r\nconst MoviePoster = ({ poster }) => {\r\n    const [isFavorite, setIsFavorite] = useState(false)\r\n\r\n    const [cookies, setCookies] = useCookies(['favorites'])\r\n\r\n    //----------------------------------------------------------------\r\n    //Components functions\r\n    //----------------------------------------------------------------\r\n    //Changes between liked and disliked movie\r\n    const toggleFavorite = () => {\r\n        if(isFavorite) \r\n            setCookies('favorites', cookies.favorites.filter(fav => poster.imdbID !== fav.imdbID), { path: '/'})\r\n        else \r\n            if(cookies.favorites)\r\n                setCookies('favorites', [...cookies.favorites, {imdbID: poster.imdbID, rate: 0, watched: false}], { path: '/'})\r\n            else \r\n                setCookies('favorites', [{imdbID: poster.imdbID, rate: 0, watched: false}], { path: '/'})\r\n        \r\n        setIsFavorite(!isFavorite)\r\n    }\r\n\r\n    //----------------------------------------------------------------\r\n    useEffect(() => {\r\n        if(cookies.favorites) \r\n            cookies.favorites.map(fav => \r\n                poster.imdbID === fav.imdbID && setIsFavorite(true)) // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []) \r\n    //----------------------------------------------------------------\r\n    return(\r\n        <div className=\"MoviePoster\">\r\n            <fieldset className=\"MoviePoster-container\"> \r\n                <legend>{poster.Title}</legend>\r\n\r\n                <img className=\"MoviePoster-img\"\r\n                alt=\"poster\" \r\n                src={ poster.Poster} />\r\n\r\n                <div className=\"MoviePoster-info\">\r\n                    <div>{`year: ${poster.Year}`}</div>\r\n\r\n                    <div>{`type: ${poster.Type}`}</div>\r\n\r\n                    <div>{`imdbID: ${poster.imdbID}`}</div>\r\n                   \r\n                    <div className=\"MoviePoster-favorite\" \r\n                    onClick={() => toggleFavorite()}>\r\n                        {isFavorite \r\n                            ?<AiFillHeart size={'100px'} color=\"red\"/>\r\n                            :<AiOutlineHeart size={'100px'}/>}\r\n                            \r\n                    </div>\r\n                </div>\r\n            </fieldset> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MoviePoster","import './movieFavorite.css'\r\nimport { FaCheck } from 'react-icons/fa'\r\n\r\nconst MovieFavorite = ({ favorite, watched, setSelectedMovie }) => {\r\n\r\n    return(\r\n        <div className=\"MovieFavorite\"\r\n        onClick={() => setSelectedMovie(favorite)}>\r\n           <fieldset className=\"MovieFavorite-container\">\r\n               <legend>{favorite.Title}</legend>\r\n\r\n               <img alt=\"poster\" src={ favorite.Poster} />\r\n\r\n               {watched && <FaCheck className=\"MovieFavorite-watched\" size={'70px'}/>}\r\n           </fieldset>\r\n        </div>\r\n    ) \r\n}\r\n\r\nexport default MovieFavorite","import './starVoter.css';\r\nimport { AiOutlineStar, AiFillStar } from 'react-icons/ai'\r\n\r\nimport { useCookies } from 'react-cookie';\r\n\r\nconst StartVoter = ({ imdbID, rate }) => {\r\n    const stars = 5\r\n    const [cookies, setCookies] = useCookies(['favorites'])\r\n\r\n    //----------------------------------------------------------------\r\n    //Components functions\r\n    //----------------------------------------------------------------\r\n    //Converts rate into starArray\r\n    const converter = (rate) => {\r\n        const buffer = new Array(stars)\r\n        return buffer.fill(true, 0, rate).fill(false, rate, stars)      \r\n    }\r\n\r\n    //----------------------------------------------------------------\r\n    return(\r\n        <div className=\"StarVoter\">\r\n            {converter(rate).map((star, rate) => \r\n                <div className=\"StarVoter-star\" key={rate}\r\n                onClick={() => {\r\n                    cookies.favorites.forEach((fav, index) => {\r\n                        if(fav.imdbID === imdbID) {\r\n                            const buffer = cookies.favorites\r\n                            buffer[index] = { \r\n                                imdbID: fav.imdbID, \r\n                                rate: rate+1, \r\n                                watched:  buffer[index].watched}\r\n                            setCookies('favorites',  buffer, { path: '/' })\r\n                        }\r\n                    })\r\n                }}>\r\n\r\n                    {star ? <AiFillStar size={'10vh'} color={'yellow'}/>: <AiOutlineStar size={'10vh'}/>}\r\n               \r\n                </div>\r\n            )}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StartVoter;","export const loading = (isLoading) => {\r\n    if(isLoading) return{ type: \"START_LOADING\" }\r\n    else return{ type: \"STOP_LOADING\" }\r\n}","export const omdbFindByTitle = async (title) => {\r\n    const respond = await fetch(`https://www.omdbapi.com/?s=${title}&apikey=83b9aeb1`)\r\n    return respond.json()\r\n  }\r\n\r\nexport const omdbFindById = async (imdbID) => {\r\n    const respond = await fetch(`https://www.omdbapi.com/?i=${imdbID}&apikey=83b9aeb1`)\r\n    return respond.json()\r\n  }\r\n","import './movieLibrary.css';\r\nimport MovieFavorite from './movieFavorite/MovieFavorite';\r\nimport StarVoter from './starVoter/StarVoter';\r\nimport { IoChevronBack } from 'react-icons/io5'\r\nimport { FaCheck, FaTrash } from 'react-icons/fa'\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux'\r\nimport { loading } from '../../state/action-creators/loadingAction'\r\nimport { useCookies } from 'react-cookie';\r\n\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { omdbFindById } from '../../req/omdbReq';\r\n\r\nconst MovieLibrary = ({ backRefresh }) => {\r\n    const [selectedMovie, setSelectedMovie] = useState()\r\n    const [favorites, setFavorites] = useState()\r\n    const [cookies, setCookies] = useCookies(['favorites'])\r\n\r\n    const dispatch = useDispatch()\r\n    //----------------------------------------------------------------\r\n    //Components functions\r\n    //----------------------------------------------------------------\r\n    //Asks server to find movies\r\n    const findMovies = () => {\r\n        dispatch(loading(true))\r\n\r\n        const buffer = []\r\n        //Maps for every favorite saved in cookies\r\n        cookies.favorites && cookies.favorites.forEach(fav => { \r\n            //Requests by id \r\n            omdbFindById(fav.imdbID)\r\n                .then((result) => {\r\n                    //Pushs result to buffer\r\n                    buffer.push(result)\r\n                    //If every movie's info was downloaded updates site\r\n                    if(buffer.length >= cookies.favorites.length)\r\n                        setFavorites(buffer)\r\n                        //Sets selected one of firsts favorite movie\r\n                        if(buffer.length > 0)\r\n                            setSelectedMovie(buffer[0])\r\n                })\r\n                .catch(err => console.log(err.message))\r\n        })\r\n        \r\n        setTimeout(() => dispatch(loading(false)), 500)\r\n    }\r\n\r\n    //Removes favorite from cookies and state\r\n    const removeFavorite = (imdbID) => {\r\n        //Changes favorites cookie\r\n        setCookies(\r\n            'favorites', \r\n            cookies.favorites.filter((fav) => fav.imdbID !== imdbID), \r\n            { path: '/' }\r\n        )\r\n        //Changes favorites state \r\n        setFavorites(favorites.filter((fav) => fav.imdbID !== imdbID))\r\n        //After that selects next movie\r\n        favorites[1] ? setSelectedMovie(favorites[1]) : setSelectedMovie()\r\n    }\r\n\r\n    //Change whether movie was watched or not\r\n    const toggleWatched = () => {\r\n        cookies.favorites.forEach((fav, index) => { \r\n            if(fav.imdbID === selectedMovie.imdbID) {\r\n                const buffer = cookies.favorites\r\n                //Toggles buffer element's watched property \r\n                buffer[index] = {\r\n                    imdbID: fav.imdbID,\r\n                    rate: buffer[index].rate,\r\n                    watched: !buffer[index].watched\r\n                }\r\n                //Updates site\r\n                setCookies('favorites', buffer, {path: '/'})\r\n            }\r\n        })\r\n    }\r\n\r\n    //----------------------------------------------------------------\r\n    useEffect(() => {\r\n        findMovies() // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n    //----------------------------------------------------------------\r\n    return(\r\n        <div className=\"MovieLibrary\">\r\n            \r\n                <Link to={'/'}\r\n                onClick={() => backRefresh()}> \r\n                    <IoChevronBack className=\"MovieLibrary-back\"\r\n                    size={'60px'}/>\r\n                </Link>\r\n\r\n                <div className=\"MovieLibrary-header\"/>\r\n\r\n                {selectedMovie && <div className=\"MovieLibrary-body\">\r\n                    <div className=\"MovieLibrary-body-top\">\r\n                        <img className=\"MovieLibrary-img\" \r\n                        alt=\"poster\" \r\n                        src={selectedMovie.Poster} />\r\n\r\n                        <div className=\"MovieLibrary-controlers\">\r\n                            <FaCheck className=\"MovieLibrary-watched\"\r\n                            size={'10vh'}\r\n                            onClick={() => toggleWatched()}\r\n                            style={{\r\n                                color: cookies.favorites.find(fav => fav.imdbID === selectedMovie.imdbID)?.watched \r\n                                    ? 'green' \r\n                                    : 'white'\r\n                                }}/>\r\n\r\n                            <FaTrash className=\"MovieLibrary-delete\"\r\n                            size={'10vh'}\r\n                            onClick={() => removeFavorite(selectedMovie.imdbID)}/>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <StarVoter \r\n                    imdbID={selectedMovie.imdbID} \r\n                    rate={cookies.favorites.find(fav => fav.imdbID === selectedMovie.imdbID)?.rate}/>\r\n                </div>}\r\n\r\n                {selectedMovie && <div className=\"MovieLibrary-info\">\r\n                    <p>{`Score: ${selectedMovie.Ratings[0] && selectedMovie.Ratings[0].Value} / 100`}</p>\r\n                    <p>{`Year: ${selectedMovie.Year}`}</p>\r\n                    <p>{`Genre: ${selectedMovie.Genre}`}</p>\r\n                    <p>{`Runtime: ${selectedMovie.Runtime}`}</p>\r\n                    <p>{`Writer: ${selectedMovie.Writer}`}</p>\r\n                    <p>{`Actors: ${selectedMovie.Actors}`}</p>\r\n                    <p>{`Plot: ${selectedMovie.Plot}`}</p>\r\n                </div>}\r\n\r\n                {favorites && <div className=\"MovieLibrary-container\">\r\n                    {favorites.map(fav => \r\n                        <MovieFavorite key={fav.imdbID} \r\n                        favorite={fav}\r\n                        watched={cookies.favorites.find(favCookie => favCookie.imdbID === fav.imdbID).watched}\r\n                        setSelectedMovie={setSelectedMovie}/>\r\n                        )}\r\n                </div>}\r\n         \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MovieLibrary;","import './App.css';\nimport './variables.css'\nimport MoviePoster from './component/moviePoster/MoviePoster';\nimport MovieLibrary from './component/movieLibrary/MovieLibrary';\nimport {IoLibrary} from 'react-icons/io5'\n\nimport { useState, } from 'react';\nimport { loading } from './state/action-creators/loadingAction'\nimport { useDispatch } from 'react-redux';\n\nimport { Link, Route } from 'react-router-dom';\n\nimport { omdbFindByTitle } from './req/omdbReq'\n\nfunction App() {\n  const [title, setTitle] = useState('')\n  const [searchResult, setSearchResult] = useState([])\n\n  const dispatch = useDispatch()\n\n  //----------------------------------------------------------------\n  //Components functions\n  //----------------------------------------------------------------\n  //Asks server to find movies by given title and updates state\n  const findMovies = () => {\n    dispatch(loading(true))\n    setSearchResult([])\n\n    omdbFindByTitle(title)\n      .then((respond) => {\n        setSearchResult(respond.Search)\n        setTimeout(() => dispatch(loading(false)), 500)\n      })\n      .catch((err) => {\n        console.log(err.message)\n        setTimeout(() => dispatch(loading(false)), 500)\n      })\n  }\n\n  //----------------------------------------------------------------\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\"></div>\n\n      <Link to='/library/'> \n        <IoLibrary className=\"App-library\" size={'60px'}/>\n      </Link>\n\n      <div className=\"App-search\">\n        <input type=\"text\"\n        placeholder=\"Enter movie's title\"\n        value={title}\n        onChange={e => setTitle(e.target.value)}/>\n\n        <button onClick={() => findMovies()}>\n          search\n        </button>\n      </div>\n\n      {searchResult && <div className=\"App-posters\">\n        {searchResult.map((poster) => <MoviePoster key={poster.imdbID} poster={poster}/>)}\n      </div>}\n\n\n      <Route path=\"/library/\">\n        <MovieLibrary backRefresh={findMovies}/>\n      </Route>\n    </div>\n  );\n}\n\nexport default App;\n","import './loading.css'\r\nimport { FcSynchronize } from \"react-icons/fc\";\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst Loading = () => {\r\n    const isLoading = useSelector((state) => state.loading)\r\n\r\n    return(\r\n        <div className=\"Loading\"\r\n        style={{display: isLoading ? 'flex' : 'none'}}>\r\n            <FcSynchronize className=\"Loading-arrow\" size={\"150px\"}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loading;","const loadingReducer = (state = false, action) => {\r\n    switch (action.type) {\r\n        case 'START_LOADING':return true\r\n\r\n        case 'STOP_LOADING':return false\r\n    \r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default loadingReducer\r\n","import loadingReducer from './loadingReducer'\r\n\r\nimport { combineReducers } from 'redux'\r\n\r\nconst reducers = combineReducers({\r\n    loading: loadingReducer,\r\n})\r\n\r\nexport default reducers","import { createStore } from 'redux'\r\nimport reducers from './reducers'\r\n\r\nconst store = createStore(reducers)\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\nimport Loading from './component/loading/Loading';\n\nimport store from './state/store'\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}> \n      <BrowserRouter>\n        <Loading />\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}